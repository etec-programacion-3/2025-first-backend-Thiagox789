
# Documentación de Endpoints de Libros

## 1. Listar todos los libros
### Endpoint: `GET /libros`
Obtiene una lista de todos los libros almacenados en la base de datos.

### Respuesta:
- `200 OK`: Devuelve la lista de libros en formato JSON.

```json
[
  {
    "id": 1,
    "titulo": "Título del libro",
    "autor": "Autor del libro",
    "categoria": "Categoría del libro",
    "estado": "disponible"
  },
  ...
]
```

---

## 2. Obtener un libro específico
### Endpoint: `GET /libros/<id>`
Obtiene los detalles de un libro específico utilizando su `id`.

### Parámetros:
- `id` (int): ID del libro a obtener.

### Respuesta:
- `200 OK`: Devuelve los detalles del libro solicitado en formato JSON.
- `404 Not Found`: Si el libro no existe.

```json
{
  "id": 1,
  "titulo": "Título del libro",
  "autor": "Autor del libro",
  "categoria": "Categoría del libro",
  "estado": "disponible"
}
```

---

## 3. Crear un nuevo libro
### Endpoint: `POST /libros`
Permite agregar un nuevo libro a la base de datos.

### Cuerpo de la solicitud:
```json
{
  "titulo": "Título del libro",
  "autor": "Autor del libro",
  "categoria": "Categoría del libro",
  "estado": "disponible" (opcional)
}
```

### Respuesta:
- `201 Created`: Si el libro se crea correctamente.
- `400 Bad Request`: Si faltan campos obligatorios o los datos no son válidos.

```json
{
  "mensaje": "Libro creado correctamente"
}
```

---

## 4. Actualizar un libro existente
### Endpoint: `PUT /libros/<id>`
Permite actualizar los detalles de un libro existente.

### Parámetros:
- `id` (int): ID del libro a actualizar.

### Cuerpo de la solicitud:
```json
{
  "titulo": "Nuevo título",
  "autor": "Nuevo autor",
  "categoria": "Nueva categoría",
  "estado": "prestado" (opcional)
}
```

### Respuesta:
- `200 OK`: Si el libro se actualiza correctamente.
- `404 Not Found`: Si el libro no existe.

```json
{
  "mensaje": "Libro actualizado correctamente"
}
```

---

## 5. Eliminar un libro
### Endpoint: `DELETE /libros/<id>`
Permite eliminar un libro existente utilizando su `id`.

### Parámetros:
- `id` (int): ID del libro a eliminar.

### Respuesta:
- `200 OK`: Si el libro se elimina correctamente.
- `404 Not Found`: Si el libro no existe.

```json
{
  "mensaje": "Libro eliminado correctamente"
}
```

---

## 6. Validación de datos
La validación de los datos se realiza en los endpoints `POST` y `PUT` para asegurarse de que los campos obligatorios (título, autor, categoría) estén presentes. Además, el campo `estado` debe ser uno de los siguientes: `disponible` o `prestado`.

### Errores de validación:
- `400 Bad Request`: Si faltan campos obligatorios o el valor de `estado` no es válido.

---
