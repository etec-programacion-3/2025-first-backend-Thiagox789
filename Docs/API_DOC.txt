
# Documentación de la API de Libros

## 1. Obtener todos los libros

**Método:** GET  
**Ruta:** `/libros/`  
**Descripción:** Obtiene una lista de todos los libros disponibles en la base de datos.

### Respuesta:
- **200 OK**: Devuelve una lista con los detalles de los libros.
  
#### Ejemplo de respuesta:
```json
[
    {
        "id": 1,
        "titulo": "Python para todos",
        "autor": "Juan Pérez",
        "categoria": "Educación",
        "estado": "disponible"
    },
    {
        "id": 2,
        "titulo": "Introducción a Python",
        "autor": "Ana Gómez",
        "categoria": "Tecnología",
        "estado": "prestado"
    }
]
```

---

## 2. Obtener un libro específico

**Método:** GET  
**Ruta:** `/libros/<id>`  
**Descripción:** Obtiene los detalles de un libro específico por su ID.

### Respuesta:
- **200 OK**: Devuelve los detalles del libro.
- **404 Not Found**: Si no se encuentra el libro con el ID especificado.

#### Ejemplo de respuesta:
```json
{
    "id": 1,
    "titulo": "Python para todos",
    "autor": "Juan Pérez",
    "categoria": "Educación",
    "estado": "disponible"
}
```

---

## 3. Crear un nuevo libro

**Método:** POST  
**Ruta:** `/libros/`  
**Descripción:** Crea un nuevo libro en la base de datos.

### Datos requeridos:
- `titulo` (string): El título del libro.
- `autor` (string): El autor del libro.
- `categoria` (string): La categoría del libro.
- `estado` (string): El estado del libro (opcional, por defecto es "disponible").

### Respuesta:
- **201 Created**: Si el libro se ha creado correctamente.
- **400 Bad Request**: Si los datos proporcionados son inválidos.

#### Ejemplo de solicitud:
```json
{
    "titulo": "Python avanzado",
    "autor": "Carlos Rodríguez",
    "categoria": "Tecnología",
    "estado": "disponible"
}
```

#### Ejemplo de respuesta:
```json
{
    "mensaje": "Libro creado correctamente"
}
```

---

## 4. Actualizar un libro

**Método:** PUT  
**Ruta:** `/libros/<id>`  
**Descripción:** Actualiza los detalles de un libro existente por su ID.

### Datos requeridos:
- `titulo` (string): El nuevo título del libro.
- `autor` (string): El nuevo autor del libro.
- `categoria` (string): La nueva categoría del libro.
- `estado` (string): El nuevo estado del libro.

### Respuesta:
- **200 OK**: Si el libro se ha actualizado correctamente.
- **404 Not Found**: Si no se encuentra el libro con el ID especificado.

#### Ejemplo de respuesta:
```json
{
    "mensaje": "Libro actualizado correctamente"
}
```

---

## 5. Eliminar un libro

**Método:** DELETE  
**Ruta:** `/libros/<id>`  
**Descripción:** Elimina un libro de la base de datos por su ID.

### Respuesta:
- **200 OK**: Si el libro se ha eliminado correctamente.
- **404 Not Found**: Si no se encuentra el libro con el ID especificado.

#### Ejemplo de respuesta:
```json
{
    "mensaje": "Libro eliminado correctamente"
}
```

---

## 6. Buscar libros por título

**Método:** GET  
**Ruta:** `/libros/buscar`  
**Descripción:** Permite buscar libros cuyo título contenga un término específico.

### Parámetros de consulta:
- `titulo` (string): El término o parte del título del libro que deseas buscar.

### Respuestas:
- **200 OK**: Si se encuentran libros con el título solicitado, devuelve una lista con los libros que coinciden.
- **400 Bad Request**: Si el parámetro `titulo` no se proporciona en la consulta.
- **404 Not Found**: Si no se encuentran libros con el título proporcionado.

#### Ejemplo de solicitud:
```
GET /libros/buscar?titulo=python
```

#### Ejemplo de respuesta exitosa:
```json
[
    {
        "id": 1,
        "titulo": "Python para todos",
        "autor": "Juan Pérez",
        "categoria": "Educación",
        "estado": "disponible"
    },
    {
        "id": 2,
        "titulo": "Introducción a Python",
        "autor": "Ana Gómez",
        "categoria": "Tecnología",
        "estado": "prestado"
    }
]
```

#### Ejemplo de respuesta con error:
Si no se proporciona el parámetro `titulo`:
```json
{
    "error": "El parámetro 'titulo' es obligatorio para la búsqueda."
}
```

Si no se encuentran libros con el término proporcionado:
```json
{
    "mensaje": "No se encontraron libros con el título proporcionado."
}
```
